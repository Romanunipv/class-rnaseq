#################
##Sul terminale##
#################

pdw
ls-l
cd nome cartlla dei dati
ls-l

su R studio

entro nella cartella in cui ho il file tar
nel terminale decomprimo il file tar
tar -xzvf nome del file -C e il path

## per sostituire una parola contemporaneamente -> CTRL+H ##
   -------------------------------------------------------
cd /workspace/class-rnaseq
mkdir -p analysis
cd analysis

## instead of copying - we create symbolic links to the original reads
## non serve fare il link basta settare bene il percorso da cui prendere le reads perchè già le ho

mkdir reads
cd reads
ln -s /workspace/class-rnaseq/datasets-class-rnaseq/raw_data/* .

### check if you can execute salmon by typing "salmon" on the terminal
## sometimes it fails on RStudio terminal, on CodeSpaces while it works on GitPod
## export PATH=${PATH}:/usr/local/bin

## the index for the transcriptome is located in
## /workspace/class-rnaseq/datasets_reference_only/trascriptome/chr21_transcripts_index

## now we can quantify all samples, by running a loop with salmon and the following

for sample in `ls *_1.fasta.gz`
do
index="/workspace/class-rnaseq/datasets_reference_only/trascriptome/chr21_transcripts_index"
name=${sample%_1.fasta.gz}
echo "quantifying $name"
salmon quant \
 -p 2 \
 -i $index \
 -l IU \
 -1 "${name}_1.fasta.gz" -2 "${name}_2.fasta.gz" \
 --validateMappings \
 -o "${name}.quant"
echo -e "$name done now\n"
done

### let's inspect a quantification file

cd sample_01.quant
head quant.sf

#################
##Sulla console##
#################

##prestare attenzione al percorso##
  -------------------------------

library(DESeq2)
library(tximport)
library(tidyverse)
library(pheatmap)
library(clusterProfiler)
library(DOSE)
library(org.Hs.eg.db)

###################################
## PREPARE DATASET CONDITIONS #####
###################################

setwd("/workspace/class-rnaseq/analysis")

dataset <- tibble(
  sample = c("sample_01",
             "sample_02",
             "sample_03",
             "sample_04",
             "sample_05",
             "sample_06"),
  condition = c(rep("control", 3),
                rep("case", 3))
)
tx2gene <- read_tsv("/workspace/class-rnaseq/datasets_reference_only/trascriptome/gencode.v29.transcripts_no-vers_chr21_tx2gene.txt")
head(tx2gene)

###################################
#### READ LOCAL FILES IN ##########
###################################

files <- file.path("/workspace/class-rnaseq/analysis/reads/", paste0(dataset$sample,".quant"), "quant.sf")
names(files) <- dataset$sample

txi <- tximport(files, type = "salmon", tx2gene = tx2gene)

colnames(txi$counts)
rownames(dataset) <- colnames(txi$counts)

dds <- DESeqDataSetFromTximport(txi, dataset, ~condition)

###################################
## PREFILTER MIN COUNTS >10 #####
###################################

keep <- rowSums(counts(dds)) >= 10
dds <- dds[keep,]

### make sure base level is control
dds$condition <- relevel(dds$condition, ref = "control")
dds$condition

###################################
##### DIFFERENTIAL EXPRESSION #####
###################################

dds <- DESeq(dds)

###################################
## EXTRACT ANALYSIS RESULTS #####
###################################

res <- results(dds)
resOrdered <- res[order(res$pvalue),]

## writeLines(summary(res), "differential_expression_summary.txt")

pdf("plotMA.pdf")
plotMA(res, ylim=c(-3,3))
dev.off()

pdf("plotDispEsts.pdf")
plotDispEsts(dds)
dev.off()

pdf("plotCounts.pdf")
plotCounts(dds, gene=which.min(res$padj), intgroup="condition")
dev.off()

###################################
## WRITE RESULTS OF ANALYSIS #####
###################################

resdata <- as_tibble(resOrdered)
resdata$gene <- rownames(resOrdered)
write_tsv(resdata, "analysis_results.tsv")

save.image("deseq2_analysis.RData")

############################################
## CLUSTERING ##############################
############################################

ntd <- normTransform(dds)
select <- order(rowMeans(counts(dds,normalized=TRUE)),
                decreasing=TRUE)[1:20]
df <- as.data.frame(colData(dds)[,c("condition")])

pdf("pheatmap.pdf")
pheatmap(assay(ntd)[select,],
         cluster_cols=FALSE, annotation_col=df$condition)
dev.off()

pdf("plotPCA.pdf")
plotPCA(ntd, intgroup=c("condition"))
dev.off()

save.image("deseq2_analysis.RData")

###################################
## EXTRACT SIGNIFICANT GENES #####
###################################

universe <- AnnotationDbi::select(org.Hs.eg.db,
                                  keys = keys(org.Hs.eg.db),
                                  columns = c('ENTREZID','SYMBOL','ENSEMBL','ENSEMBLTRANS'),
                                  keytype = 'ENTREZID')

sig_genes <- resdata$gene[which(resdata$padj<0.05)]
entrez_genes_sig <- unique(universe[which(universe$ENSEMBL %in% sig_genes),]$ENTREZID)

pvalue_ens_genes <- resdata$padj[which(resdata$padj<0.05)]
names(pvalue_ens_genes)<-sig_genes

pvalue_entrez_genes <- resdata$padj[which(resdata$padj<0.05)]
names(pvalue_entrez_genes) <- entrez_genes_sig


###################################
## ENRICH GO ANALYSIS #####
###################################

ego <- enrichGO( gene = sig_genes,
                 universe = unique(tx2gene$GENEID),
                 OrgDb = org.Hs.eg.db,
                 keyType = 'ENSEMBL',
                 ont = "BP",
                 pAdjustMethod = "BH",
                 pvalueCutoff  = 0.05)

## writeLines(summary(ego), "enrich_GO_results.txt")

pdf("plots_ego.pdf")
dotplot(ego, showCategory=30)
dev.off()

pdf("plots_network-ego.pdf")
cnetplot(ego, foldChange=resdata$log2FoldChange[which(resdata$padj<0.5)])
dev.off()

###################################
## DISGNET ANALYSIS #####
###################################

## we need to unpack the file we have to read first
## use the terminal
## cd /home/rstudio/data/datasets_class/reference/trascriptome/
## gunzip all_gene_disease_associations.tsv.gz

gda <- read_tsv(gzfile("/workspace/class-rnaseq/datasets_reference_only/trascriptome/all_gene_disease_associations.tsv.gz"))

disease2gene=gda[, c("diseaseId", "geneId")]
disease2name=gda[, c("diseaseId", "diseaseName")]

disgnet = enricher(entrez_genes_sig, TERM2GENE=disease2gene, TERM2NAME=disease2name)

## writeLines(summary(disgnet), "summary_disgnet.txt")

pdf("cnetplot_designet.pdf")
cnetplot(disgnet, foldChange=resdata$log2FoldChange[which(resdata$padj<0.5)])
dev.off()

save.image("deseq2_analysis.RData")